{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","language","infoType","classes","react_default","a","createElement","className","appWrapper","Row","appHeader","react_reveal","cascade","Col","xs","headerTitle","delay","text","href","appFooter","ButtonToolbar","iconToolbar","socialIcon","index_es","icon","faTwitter","size","sm","faGithub","faLinkedin","faLanguage","faAt","Component","injectStyle","alignItems","display","flexFlow","justifyContent","appLink","color","margin","minHeight","padding","textAlign","fontSize","fontWeight","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a17b22f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { ButtonToolbar, Row, Col } from 'react-bootstrap';\r\nimport injectStyle from 'react-jss'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTwitter, faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\nimport { faLanguage, faAt } from '@fortawesome/free-solid-svg-icons'\r\nimport { Fade } from 'react-reveal';\r\nimport Pulse from 'react-reveal/Pulse';\r\n\r\n// library.add(fab);\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      language: '',\r\n      infoType: 'all'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.appWrapper}>\r\n        <Row>\r\n          <div className={classes.appHeader}>\r\n            <Fade cascade>\r\n              <Col xs={6}>\r\n                <h1 className={classes.headerTitle}>Nicolás Díaz Soler</h1>\r\n              </Col>\r\n            </Fade>\r\n          </div>\r\n        </Row>\r\n        <Row>\r\n          <Fade delay={500} cascade>\r\n            <Col>\r\n              <div className={classes.text}>\r\n                <p>Argentinian English-Spanish Translator, specialised in Marketing, Software &amp; Videogames. Grammar and pronunciation nerd. <a href='https://en.wikipedia.org/wiki/English_as_a_second_or_foreign_language'>ESL</a> teacher. British English, mate.</p>\r\n              </div>\r\n            </Col>\r\n          </Fade>\r\n        </Row>\r\n        <Row>\r\n          <Fade delay={1000} cascade>\r\n            <Col>\r\n              <div className={classes.text}>\r\n                <p>Junior Software Developer. JavaScript, ReactJS &amp; MySQL. Looking forward to jump into React Native.</p>\r\n              </div>\r\n            </Col>\r\n          </Fade>\r\n        </Row>\r\n        <Row>\r\n          <Fade delay={1500} cascade>\r\n            <div className={classes.appFooter}>\r\n            <Col xs={8}>\r\n              <ButtonToolbar className={classes.iconToolbar}>\r\n                <Col xs={10}>\r\n                  <div className={classes.socialIcon}><a href=\"https://twitter.com/njdiaz90/\"><FontAwesomeIcon icon={faTwitter} size=\"3x\" className={classes.icon} /></a></div>\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <div className=\"social-icon\"><a href=\"https://github.com/njdiaz90/\"><FontAwesomeIcon icon={faGithub} size=\"3x\" className={classes.icon} /></a></div>\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <div className=\"social-icon\"><a href=\"https://www.linkedin.com/in/njdst/\"><FontAwesomeIcon icon={faLinkedin} size=\"3x\" className={classes.icon} /></a></div>\r\n                </Col >\r\n                <Col sm={2}>\r\n                  <div className=\"social-icon\"><a href=\"https://www.upwork.com/o/profiles/users/_~014e308c50ce78460b/\"><FontAwesomeIcon icon={faLanguage} size=\"3x\" className={classes.icon} /></a></div>\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <div className=\"social-icon\"><a href=\"https://localhost:3000\"><FontAwesomeIcon icon={faAt} size=\"3x\" className={classes.icon} /></a></div>\r\n                </Col>\r\n              </ButtonToolbar>\r\n            </Col>\r\n            </div>\r\n          </Fade>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  appHeader: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    flexFlow: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n  appFooter: {\r\n\r\n  },\r\n  appLink: {\r\n    color: '#61dafb',\r\n  },\r\n  appWrapper: {\r\n    color: 'white',\r\n    display: 'flex',\r\n    flexFlow: 'column',\r\n    justifyContent: 'space-around',\r\n    margin: '0 15vw',\r\n    minHeight: '100vh',\r\n    padding: '0',\r\n    textAlign: 'center',\r\n  },\r\n  headerTitle: {\r\n    fontSize: '3rem',\r\n    fontWeight: 'bold',\r\n  },\r\n  iconToolbar: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  icon: {\r\n    color: 'white',\r\n    borderRadius: '50%',\r\n    margin: '1rem',\r\n  },\r\n  text: {\r\n    fontSize: '1.25rem'\r\n  }\r\n}\r\n\r\nexport default injectStyle(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}